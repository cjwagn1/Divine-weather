{"version":3,"sources":["logo.svg","components/footer.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Footer","useState","weather","className","main","temp","class","target","rel","id","href","api","App","query","setQuery","setWeather","placeholder","type","onChange","e","value","onKeyPress","evt","key","fetch","then","res","json","result","console","log","name","sys","country","d","day","getDay","date","getDate","month","getMonth","year","getFullYear","dateBuilder","Date","Math","round","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"8IAAAA,EAAOC,QAAU,IAA0B,kC,sFC8B5BC,G,MA1BA,WAAO,IAAD,EACWC,mBAAS,IADpB,mBACZC,EADY,UAEnB,OACE,4BACEC,UACyB,oBAAhBD,EAAQE,MACXF,EAAQE,KAAKC,KAAO,GAClB,YAEF,QAGN,uBAAGC,MAAM,wBAAT,sBACsB,IACpB,uBACEC,OAAO,SACPC,IAAI,sBACJC,GAAG,cACHC,KAAK,2CAJP,qBCbFC,EACC,mCADDA,EAEE,2CAgGOC,EA7FH,WAAO,IAAD,EACUX,mBAAS,IADnB,mBACTY,EADS,KACFC,EADE,OAEcb,mBAAS,IAFvB,mBAETC,EAFS,KAEAa,EAFA,KAiDhB,OACE,yBACEZ,UACyB,oBAAhBD,EAAQE,MACXF,EAAQE,KAAKC,KAAO,GAClB,WAEF,OAGN,8BACE,yBAAKF,UAAU,UACb,yBAAKA,UAAU,cACb,2BACEA,UAAU,aACVa,YAAY,mDACZC,KAAK,OACLC,SAAU,SAAAC,GAAC,OAAIL,EAASK,EAAEZ,OAAOa,QACjCA,MAAOP,EACPQ,WAhEG,SAAAC,GACG,UAAZA,EAAIC,KACNC,MAAM,GAAD,OAAIb,EAAJ,qBAAyBE,EAAzB,+BAAqDF,IACvDc,MAAK,SAAAC,GAAG,OAAIA,EAAIC,UAChBF,MAAK,SAAAG,GACJb,EAAWa,GACXd,EAAS,IACTe,QAAQC,IAAIF,WA6DU,oBAAhB1B,EAAQE,KACd,6BACE,yBAAKD,UAAU,gBACb,yBAAKA,UAAU,YACZD,EAAQ6B,KADX,KACmB7B,EAAQ8B,IAAIC,SAE/B,yBAAK9B,UAAU,QA9DP,SAAA+B,GAClB,IAwBIC,EAVO,CACT,SACA,SACA,UACA,YACA,WACA,SACA,YAGaD,EAAEE,UACbC,EAAOH,EAAEI,UACTC,EA1BS,CACX,UACA,WACA,QACA,QACA,MACA,OACA,OACA,SACA,YACA,UACA,WACA,YAciBL,EAAEM,YACjBC,EAAOP,EAAEQ,cAEb,MAAM,GAAN,OAAUP,EAAV,YAAiBE,EAAjB,YAAyBE,EAAzB,YAAkCE,GAgCDE,CAAY,IAAIC,QAEzC,yBAAKzC,UAAU,eACb,yBAAKA,UAAU,QAAQ0C,KAAKC,MAAM5C,EAAQE,KAAKC,MAA/C,SACA,yBAAKF,UAAU,WAAWD,EAAQA,QAAQ,GAAGE,QAIjD,IAGJ,kBAAC,EAAD,QCvFc2C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMjC,MAAK,SAAAkC,GACjCA,EAAaC,kB","file":"static/js/main.63089116.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React, { useState } from \"react\";\r\nimport { dateBuilder } from \"./methods.js\";\r\nimport \"../css/index.css\";\r\n\r\nconst Footer = () => {\r\n  const [weather, setWeather] = useState({});\r\n  return (\r\n    <footer\r\n      className={\r\n        typeof weather.main != \"undefined\"\r\n          ? weather.main.temp > 16\r\n            ? \"foot warm\"\r\n            : \"foot\"\r\n          : \"foot\"\r\n      }\r\n    >\r\n      <p class=\"footer-company-motto\">\r\n        Website Designed by{\" \"}\r\n        <a\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n          id=\"cartersName\"\r\n          href=\"https://cjwagn1.github.io/personalsite/\"\r\n        >\r\n          Carter Wagner\r\n        </a>\r\n      </p>\r\n    </footer>\r\n  );\r\n};\r\nexport default Footer;\r\n","import React, { useState } from \"react\";\nimport logo from \"./logo.svg\";\nimport \"./css/index.css\";\nimport Footer from \"./components/footer.js\";\n\nconst api = {\n  key: \"deeee700b79ce1a20378a67cbf4a6322\",\n  base: \"https://api.openweathermap.org/data/2.5/\"\n};\n\nconst App = () => {\n  const [query, setQuery] = useState(\"\");\n  const [weather, setWeather] = useState({});\n\n  const search = evt => {\n    if (evt.key === \"Enter\") {\n      fetch(`${api.base}weather?q=${query}&units=metric&APPID=${api.key}`)\n        .then(res => res.json())\n        .then(result => {\n          setWeather(result);\n          setQuery(\"\");\n          console.log(result);\n        });\n    }\n  };\n\n  const dateBuilder = d => {\n    let months = [\n      \"January\",\n      \"February\",\n      \"March\",\n      \"April\",\n      \"May\",\n      \"June\",\n      \"July\",\n      \"August\",\n      \"September\",\n      \"October\",\n      \"November\",\n      \"December\"\n    ];\n    let days = [\n      \"Sunday\",\n      \"Monday\",\n      \"Tuesday\",\n      \"Wednesday\",\n      \"Thursday\",\n      \"Friday\",\n      \"Saturday\"\n    ];\n\n    let day = days[d.getDay()];\n    let date = d.getDate();\n    let month = months[d.getMonth()];\n    let year = d.getFullYear();\n\n    return `${day} ${date} ${month} ${year}`;\n  };\n\n  return (\n    <div\n      className={\n        typeof weather.main != \"undefined\"\n          ? weather.main.temp > 16\n            ? \"app warm\"\n            : \"app\"\n          : \"app\"\n      }\n    >\n      <main>\n        <div className=\"center\">\n          <div className=\"search-box\">\n            <input\n              className=\"search-bar\"\n              placeholder=\"Search... Ex: 'Saint Louis' or 'Kansas City, MO'\"\n              type=\"text\"\n              onChange={e => setQuery(e.target.value)}\n              value={query}\n              onKeyPress={search}\n            ></input>\n          </div>\n        </div>\n        {typeof weather.main != \"undefined\" ? (\n          <div>\n            <div className=\"location-box\">\n              <div className=\"location\">\n                {weather.name}, {weather.sys.country}\n              </div>\n              <div className=\"date\">{dateBuilder(new Date())}</div>\n            </div>\n            <div className=\"weather-box\">\n              <div className=\"temp\">{Math.round(weather.main.temp)}Â°c</div>\n              <div className=\"weather\">{weather.weather[0].main}</div>\n            </div>\n          </div>\n        ) : (\n          \"\"\n        )}\n      </main>\n      <Footer />\n    </div>\n  );\n};\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./css/index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}